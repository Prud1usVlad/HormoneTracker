// <auto-generated />
using System;
using HormoneTracker.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HormoneTracker.DAL.Migrations
{
    [DbContext(typeof(HormoneTrackerDBContext))]
    partial class HormoneTrackerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnalysisDatum", b =>
                {
                    b.Property<int>("AnalysisId")
                        .HasColumnType("int");

                    b.Property<int>("DataId")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId", "DataId");

                    b.HasIndex("DataId");

                    b.ToTable("AnalysisData", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Analysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusId");

                    b.ToTable("Analysis", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Datum", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("NormCoefficient")
                        .HasColumnType("float");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("DataId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MidName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AmountLast")
                        .HasColumnType("int");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDoseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Period")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicine", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MidName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.ProductDatum", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("DataId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "DataId");

                    b.ToTable("ProductData");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Tip", b =>
                {
                    b.Property<int>("TipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("TipId");

                    b.HasIndex("PatientId");

                    b.ToTable("Tip", (string)null);
                });

            modelBuilder.Entity("AnalysisDatum", b =>
                {
                    b.HasOne("HormoneTracker.Core.Models.Analysis", null)
                        .WithMany()
                        .HasForeignKey("AnalysisId")
                        .IsRequired()
                        .HasConstraintName("FK_AnalysisData_Analysis");

                    b.HasOne("HormoneTracker.Core.Models.Datum", null)
                        .WithMany()
                        .HasForeignKey("DataId")
                        .IsRequired()
                        .HasConstraintName("FK_AnalysisData_Data");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Analysis", b =>
                {
                    b.HasOne("HormoneTracker.Core.Models.Patient", "Patient")
                        .WithMany("Analyses")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Analysis_Patient");

                    b.HasOne("HormoneTracker.Core.Models.Status", "Status")
                        .WithMany("Analyses")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Analysis_Status");

                    b.Navigation("Patient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Patient", b =>
                {
                    b.HasOne("HormoneTracker.Core.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Patient_Doctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.ProductDatum", b =>
                {
                    b.HasOne("HormoneTracker.Core.Models.Product", "Product")
                        .WithMany("ProductData")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductData_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Tip", b =>
                {
                    b.HasOne("HormoneTracker.Core.Models.Patient", "Patient")
                        .WithMany("Tips")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Tip_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Doctor", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Patient", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("Tips");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Product", b =>
                {
                    b.Navigation("ProductData");
                });

            modelBuilder.Entity("HormoneTracker.Core.Models.Status", b =>
                {
                    b.Navigation("Analyses");
                });
#pragma warning restore 612, 618
        }
    }
}
